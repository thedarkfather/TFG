<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security-3.2.xsd
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<!-- Rest authentication entry point configuration -->
	<http use-expressions="true" entry-point-ref="restServicesEntryPoint"
		authentication-manager-ref="authenticationManagerForRest">
		<sec:custom-filter ref="corsHandler" after="PRE_AUTH_FILTER" />
		<intercept-url pattern="/**" />

		<!-- Aquí empiezan los intercepts -->
		
		<!-- STATIC FILES -->
		
		<!--<sec:intercept-url pattern="/actor/views/login.html" access="isAnonymous()" /> -->
		
		<!-- INDEX -->
		
		<sec:intercept-url pattern="/api/register/userInfo" access="permitAll" />
		<sec:intercept-url pattern="/api/search/**" access="permitAll" />
		
		<!-- MAIN PAGE -->
		
		<sec:intercept-url pattern="/api/newsItem/developer/timeline" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/gameproject/popular" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/workingTeam/developer/listOwn" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/gameproject/mine" access="hasRole('DEVELOPER')" />
		
		<!-- ACTOR -->
		
		<sec:intercept-url pattern="/j_spring_security_check" access="permitAll" />
		<sec:intercept-url pattern="/api/profile/**" access="permitAll" />
		<sec:intercept-url pattern="/api/gameproject/subscription/**" access="permitAll" />
		<sec:intercept-url pattern="/api/profile/edit" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/profile/editProf" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/register/register" access="permitAll" />
		<sec:intercept-url pattern="/api/register/check" access="permitAll" />
		<sec:intercept-url pattern="/api/register/premium" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/profile/coins" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/register/pay/**" access="isAuthenticated()" />
		
		<!-- GAMEPROJECT -->
		
		<sec:intercept-url pattern="/api/state/all" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/platform/all" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/gameproject/save" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/subscription/btnMessage/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/subscription/change/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/gameproject/details/**" access="permitAll" />
		<sec:intercept-url pattern="/api/review/list/**" access="permitAll" />
		<sec:intercept-url pattern="/api/newsItem/list/**" access="permitAll" />
		<sec:intercept-url pattern="/api/review/edit/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/assessment/assesReview" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/gameproject/edit/**" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/gameproject/list/**" access="permitAll" />
		<sec:intercept-url pattern="/api/gameproject/check" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/gameproject/isCreator" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/gameproject/belongs" access="hasRole('DEVELOPER')" />
		
		
		<!-- NEWSITEM -->
		
		<sec:intercept-url pattern="/api/newsItem/developer/edit" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/newsItem/display/**" access="permitAll" />
		<sec:intercept-url pattern="/api/comment/list/**" access="permitAll" />
		<sec:intercept-url pattern="/api/comment/save" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/assessment/asses" access="isAuthenticated()" />
		
		<!-- WORKINGTEAM -->
		
		<sec:intercept-url pattern="/api/workingTeam/developer/save" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/workingTeam/developer/check" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/workingTeam/developer/edit" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/workingTeam/developer/details/workingTeam" access="permitAll" />
		<sec:intercept-url pattern="/api/workingTeam/developer/details/gameProjects" access="permitAll" />
		<sec:intercept-url pattern="/api/workingTeam/developer/details/developers" access="permitAll" />
		<sec:intercept-url pattern="/api/workingTeam/developer/mine" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/workingTeam/developer/list" access="permitAll()" />	
		<sec:intercept-url pattern="/api/workingTeam/developer/listByDeveloperId/**" access="permitAll()" />	
	
		<!-- POSITION -->
		
		<sec:intercept-url pattern="/api/specialty/all" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/position/developer/**" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/application/developer/**" access="hasRole('DEVELOPER')" />
	
		<!-- AUCTIONS -->
		
		<sec:intercept-url pattern="/api/auction/create/**" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/auction/edit" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/auction/list" access="permitAll" />
		<sec:intercept-url pattern="/api/auction/display/**" access="permitAll" />
		<sec:intercept-url pattern="/api/auction/pastAuctions/**" access="hasRole('DEVELOPER')" />
		<sec:intercept-url pattern="/api/bid/display/**" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/bid/bid" access="isAuthenticated()" />
	
		<!-- KEYS -->
		
		<sec:intercept-url pattern="/api/keys/mine" access="isAuthenticated()" />
		<sec:intercept-url pattern="/api/keys/mineOfGameProject/**" access="isAuthenticated()" />
		
		<!-- Aquí terminan los intercepts -->

		<sec:form-login authentication-success-handler-ref="mySuccessHandler"
			authentication-failure-url="/api/login/error" />
		<sec:access-denied-handler ref="myAuthenticationAccessDeniedHandler" />
		<http-basic />
		<logout logout-url="/logout" />
	</http>

	<!-- Entry point for REST service. -->
	<beans:bean id="restServicesEntryPoint" class="security.RestAuthenticationEntryPoint" />

	<!-- Custom User details service which is provide the user data -->
	<beans:bean id="customUserDetailsService" class="security.LoginService" />

	<!-- Connect the custom authentication success handler -->
	<beans:bean id="mySuccessHandler" class="security.RestAuthenticationSuccessHandler" />

	<!-- Using Authentication Access Denied handler -->
	<beans:bean id="myAuthenticationAccessDeniedHandler"
		class="security.RestAuthenticationAccessDeniedHandler" />

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<beans:bean id="corsHandler" class="security.CorsFilter" />


	<!-- Authentication manager -->
	<authentication-manager alias="authenticationManagerForRest">
		<authentication-provider user-service-ref="customUserDetailsService">
			<sec:password-encoder ref="passwordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<!-- Enable the annotations for defining the secure role -->
	<global-method-security secured-annotations="enabled" />

</beans:beans>